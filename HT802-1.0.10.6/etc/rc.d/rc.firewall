#!/bin/sh

#
# Read Configuration File
#
if [ -r /tmp/config/rc.conf -a "$conf_sourced" != "1" ]; then
    . /tmp/config/rc.conf
fi

. /etc/rc.d/init.d/functions

#Public variable
WAN="`nvram get wan_device`"
LAN=eth0

# Under strict limit rule,
# only port1-port2 or port1-port2-...-portN is valid port range
# otherwise, -port1 means 0-port1, port1- means port1-65535
STRICT_LIMIT_PORT_RANGE=1

WHITELIST=
BLACKLIST=
PORTBLACKLIST=
process_lists()
{
    NEWLIST=""
    WHITELIST="$(nvram get 20701 | tr ',\r\n\t' ' '|tr -s ' ')"
    for i in $WHITELIST
    do
        if [ -n "$(echo $i |awk -F "\." '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/ && $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255')" ]; then
            NEWLIST="${NEWLIST} $i"
        elif [ -n "$(echo $i |awk -F "\." '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/ && $1 <=255 && $2 <= 255 && $3 <= 255'| awk -F "\/" '$2 <= 32')" ]; then
            NEWLIST="${NEWLIST} $i"
        fi    
    done
    NEWLIST="$( echo ${NEWLIST}| sed 's/^ *//')"
    WHITELIST="${NEWLIST}"
    NEWLIST=""
    BLACKLIST="$(nvram get 20702 | tr ',\r\n\t' ' '|tr -s ' ')"
    for i in $BLACKLIST
    do
        if [ -n "$(echo $i |awk -F "\." '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/ &&  $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255')" ]; then
            NEWLIST="${NEWLIST} $i"
        elif [ -n "$(echo $i |awk -F "\." '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/ && $1 <=255 && $2 <= 255 && $3 <= 255'| awk -F "\/" '$2 <= 32')" ]; then
            NEWLIST="${NEWLIST} $i"
        fi    
    done
    NEWLIST="$( echo ${NEWLIST}| sed 's/^ *//')"
    BLACKLIST="${NEWLIST}"
}

process_port_list()
{
    local regex="[^0-9,-]"
    PORTBLACKLIST="$(echo ${web_port_blacklist} | sed "s/${regex}//g")"
    ruleArray="$(get_array "${PORTBLACKLIST}" ",")"

    if [ -n "${ruleArray}" ]; then
        for rule in ${ruleArray}
        do
            IsPortRange="$(echo "${rule}" | grep "-")"
            if [ -n "${IsPortRange}" ];then
                RangePorts="${rule}"
                portsArraySize="$(get_array "${RangePorts}" "-" "-1")"
                if [ ${portsArraySize} -eq 1 -a ${STRICT_LIMIT_PORT_RANGE} -eq 0 ];then
                    IsolatePort="$(echo "${RangePorts}" | sed "s/-//g")"
                    valid_port "${IsolatePort}"
                    if [ $? -eq 1 ]; then
                        IsPrefixRangeChar="$(echo "${RangePorts}" | sed "s/^-/Prefix/g" | grep "Prefix")"
                        if [ -n "${IsPrefixRangeChar}" ];then
                            iptables -A INPUT -p tcp -i ${WAN} --dport 0:${IsolatePort} -j DROP
                            iptables -A INPUT -p udp -i ${WAN} --dport 0:${IsolatePort} -j DROP
                            iptables -A OUTPUT -p tcp -o ${WAN} --sport 0:${IsolatePort} -j DROP
                            iptables -A OUTPUT -p udp -o ${WAN} --sport 0:${IsolatePort} -j DROP
                        else
                            iptables -A INPUT -p tcp -i ${WAN} --dport ${IsolatePort}:65535 -j DROP
                            iptables -A INPUT -p udp -i ${WAN} --dport ${IsolatePort}:65535 -j DROP
                            iptables -A OUTPUT -p tcp -o ${WAN} --sport ${IsolatePort}:65535 -j DROP
                            iptables -A OUTPUT -p udp -o ${WAN} --sport ${IsolatePort}:65535 -j DROP
                        fi
                    fi
                elif [ ${portsArraySize} -gt 1 ];then
                    portsArray="$(get_array "${RangePorts}" "-")"
                    minPort=""
                    maxPort=""
                    for port in ${portsArray}
                    do
                        valid_port "${port}"
                        if [ $? -eq 1 ]; then
                            [ -z "${minPort}" ] && minPort="${port}"
                            [ -z "${maxPort}" ] && maxPort="${port}"
                            [ -n "${minPort}" ] && [ ${minPort} -gt ${port} ] && minPort="${port}"
                            [ -n "${maxPort}" ] && [ ${maxPort} -lt ${port} ] && maxPort="${port}"
                        fi
                    done
                    if [ -n "${minPort}" -a -n "${maxPort}" ];then
                        iptables -A INPUT -p tcp -i ${WAN} --dport ${minPort}:${maxPort} -j DROP
                        iptables -A INPUT -p udp -i ${WAN} --dport ${minPort}:${maxPort} -j DROP
                        iptables -A OUTPUT -p tcp -o ${WAN} --sport ${minPort}:${maxPort} -j DROP
                        iptables -A OUTPUT -p udp -o ${WAN} --sport ${minPort}:${maxPort} -j DROP
                    elif [ -n "${minPort}" ];then
                        iptables -A INPUT -p tcp -i ${WAN} --dport ${minPort} -j DROP
                        iptables -A INPUT -p udp -i ${WAN} --dport ${minPort} -j DROP
                        iptables -A OUTPUT -p tcp -o ${WAN} --sport ${minPort} -j DROP
                        iptables -A OUTPUT -p udp -o ${WAN} --sport ${minPort} -j DROP
                    elif [ -n "${maxPort}" ];then
                        iptables -A INPUT -p tcp -i ${WAN} --dport ${maxPort} -j DROP
                        iptables -A INPUT -p udp -i ${WAN} --dport ${maxPort} -j DROP
                        iptables -A OUTPUT -p tcp -o ${WAN} --sport ${maxPort} -j DROP
                        iptables -A OUTPUT -p udp -o ${WAN} --sport ${maxPort} -j DROP
                    fi
                fi
            else
                IsolatePort="${rule}"
                valid_port "${IsolatePort}"
                if [ $? -eq 1 ]; then
                    iptables -A INPUT -p tcp -i ${WAN} --dport ${IsolatePort} -j DROP
                    iptables -A INPUT -p udp -i ${WAN} --dport ${IsolatePort} -j DROP
                    iptables -A OUTPUT -p tcp -o ${WAN} --sport ${IsolatePort} -j DROP
                    iptables -A OUTPUT -p udp -o ${WAN} --sport ${IsolatePort} -j DROP
                fi
            fi
        done
    fi
}

# Bug 90573
WAN_IP="`ifconfig ${WAN} 2> /dev/null |grep -i "inet addr:" | cut -f2 -d':' | cut -f1 -d" "`"
if [ -z "${WAN_IP}" ];then
        exit
fi

LAN_IP="`ifconfig ${LAN} |grep -i "inet addr:" | cut -f2 -d':' | cut -f1 -d" "`"
LAN_IP_PREFIX="`echo ${LAN_IP} | cut -f1,2,3 -d'.'`"

#Check firewall enable
if [ "${FIREWALL_ENABLE}" = "0" ];then
	exit
fi	

#Ping From WAN side
if [ "${ALLOW_PING_FROM_WAN_SIDE}" = "0" ];then
	iptables -D INPUT -i ${WAN} -p icmp --icmp-type echo-request -j DROP 2> /dev/null
	iptables -A INPUT -i ${WAN} -p icmp --icmp-type echo-request -j DROP
else
	if [ "${route_switch_mode}" = "0" ]; then
		iptables -A INPUT -i ${WAN} -d ${LAN_IP} -p icmp --icmp-type echo-request -j DROP
	fi
fi

if [ "${ALLOW_WAN_HTTP_ACCESS}" = "2" ];then
	check_private_ipv4 ${WAN_IP} || {
		echo "WAN port is assigned a public address, disable HTTP/SSH access"
		ALLOW_WAN_HTTP_ACCESS=0
	}
fi

#HTTP Access From WAN side
if [ "${ALLOW_WAN_HTTP_ACCESS}" = "0" ];then
	iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${web_port} -j DROP 2> /dev/null
	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${web_port} -j DROP
	iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${web_https_port} -j DROP 2> /dev/null
	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${web_https_port} -j DROP

	iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${sshd_port} -j DROP 2> /dev/null
	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${sshd_port} -j DROP
else
    process_lists
    if [ -n "${WHITELIST}" ]; then
        echo "Setting white list for HTTP/SSH access"
        i=0
        for WHITE_ADDR in ${WHITELIST}
        do
            echo "Accept packets from ${WHITE_ADDR}"
            #give access only to wl and drop the rest
	        iptables -A INPUT -p tcp -i ${WAN} -s ${WHITE_ADDR} -d ${WAN_IP} --dport ${web_port} -j ACCEPT
	        iptables -A INPUT -p tcp -i ${WAN} -s ${WHITE_ADDR} -d ${WAN_IP} --dport ${web_https_port} -j ACCEPT
            iptables -A INPUT -p tcp -i ${WAN} -s ${WHITE_ADDR} -d ${WAN_IP} --dport ${sshd_port} -j ACCEPT
            i=$(($i+1))
            if [ $i -gt 9 ]; then
                break
            fi    
        done    
        echo "Drop packets from the rest"
        #drop the rest
	    iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${web_port} -j DROP 2> /dev/null
    	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${web_port} -j DROP
	    iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${web_https_port} -j DROP 2> /dev/null
    	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${web_https_port} -j DROP

	    iptables -D INPUT -p tcp -i ${WAN} --syn --dport ${sshd_port} -j DROP 2> /dev/null
    	iptables -A INPUT -p tcp -i ${WAN} --syn --dport ${sshd_port} -j DROP
    else
        if [ -n "${BLACKLIST}" ]; then
            echo "Setting black list for HTTP/SSH access"
            i=0
            for BLACK_ADDR in ${BLACKLIST}
            do
                echo "Drop packets from ${BLACK_ADDR}"
                #block access to bl
    	        iptables -D INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${web_port} -j DROP 2> /dev/null
        	    iptables -A INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${web_port} -j DROP
    	        iptables -D INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${web_https_port} -j DROP 2> /dev/null
        	    iptables -A INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${web_https_port} -j DROP

    	        iptables -D INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${sshd_port} -j DROP 2> /dev/null
            	iptables -A INPUT -p tcp -i ${WAN} -s ${BLACK_ADDR} --syn --dport ${sshd_port} -j DROP
                i=$(($i+1))
                if [ $i -gt 9 ]; then
                    break
                fi    
            done    
        fi    
        iptables -t nat -D PREROUTING  -p tcp --dport ${web_port} -d ${WAN_IP} -j ACCEPT 2>/dev/null
        iptables -t nat -A PREROUTING  -p tcp --dport ${web_port} -d ${WAN_IP} -j ACCEPT
        iptables -t nat -D PREROUTING  -p tcp --dport ${web_https_port} -d ${WAN_IP} -j ACCEPT 2>/dev/null
        iptables -t nat -A PREROUTING  -p tcp --dport ${web_https_port} -d ${WAN_IP} -j ACCEPT
        iptables -t nat -D PREROUTING  -p tcp --dport ${sshd_port} -d ${WAN_IP} -j ACCEPT 2>/dev/null
        iptables -t nat -A PREROUTING  -p tcp --dport ${sshd_port} -d ${WAN_IP} -j ACCEPT

	    iptables -A INPUT -p tcp -i ${WAN} -d ${WAN_IP} --dport ${web_port} -j ACCEPT
	    iptables -A INPUT -p tcp -i ${WAN} -d ${WAN_IP} --dport ${web_https_port} -j ACCEPT
    	iptables -A INPUT -p tcp -i ${WAN} -d ${WAN_IP} --dport ${sshd_port} -j ACCEPT
	    iptables -A INPUT -p tcp -i ${WAN} --dport ${web_port} -j DROP
	    iptables -A INPUT -p tcp -i ${WAN} --dport ${web_https_port} -j DROP
    	iptables -A INPUT -p tcp -i ${WAN} --dport ${sshd_port} -j DROP
    fi    
fi

#Black List for WAN Side Port
process_port_list

if [ "${route_switch_mode}" = "0" ]; then
#####################enable DMZ#################################################
if [ -n "${DMZ_HOST}" ]; then
################Jose Start########################    
	case "`cat /proc/gxp/dev_info/dev_alias`" in
	    HT814) N=1 ;;
		HT812) N=1 ;;
	esac
	ADDITIONAL_RTP_PROFILE1=`expr "${RTP_PROFILE1}" + $N \* 2`
	ADDITIONAL_RTP_PROFILE2=`expr "${RTP_PROFILE2}" + $N \* 2`
	TEMP_RTP_PROFILE1="${RTP_PROFILE1}"
	TEMP_RTP_PROFILE2="${RTP_PROFILE2}"
	TEMP_SIP_PROFILE1="${SIP_PROFILE1}"
	TEMP_SIP_PROFILE2="${SIP_PROFILE2}"
    i=1
	while [ "${i}" -lt "${N}" ]
	do
		TEMP_RTP_PROFILE1=${TEMP_RTP_PROFILE1},`expr "${RTP_PROFILE1}" + ${i} \* 2`
		ADDITIONAL_RTP_PROFILE1=${ADDITIONAL_RTP_PROFILE1},`expr "${RTP_PROFILE1}" + ${i} \* 2 + ${N} \* 2`
		TEMP_RTP_PROFILE2=${TEMP_RTP_PROFILE2},`expr "${RTP_PROFILE2}" + ${i} \* 2`
		ADDITIONAL_RTP_PROFILE2=${ADDITIONAL_RTP_PROFILE2},`expr "${RTP_PROFILE2}" + ${i} \* 2 + ${N} \* 2`
		TEMP_SIP_PROFILE1=${TEMP_SIP_PROFILE1},`expr "${SIP_PROFILE1}" + ${i} \* 2`
		TEMP_SIP_PROFILE2=${TEMP_SIP_PROFILE2},`expr "${SIP_PROFILE2}" + ${i} \* 2`
		i=`expr ${i} + 1`
	done
	RTP_PROFILE1="${TEMP_RTP_PROFILE1}"
	RTP_PROFILE2="${TEMP_RTP_PROFILE2}"
	SIP_PROFILE1="${TEMP_SIP_PROFILE1}"
	SIP_PROFILE2="${TEMP_SIP_PROFILE2}"

    if [ "`nvram get 271`" = "1" ];then	
        case "`nvram get 130`" in
            0) iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${SIP_PROFILE1} -j ACCEPT ;;
            *) iptables -t nat -A PREROUTING  -p tcp -d ${WAN_IP} -m multiport --dport ${SIP_PROFILE1} -j ACCEPT ;;
        esac 
        iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${RTP_PROFILE1} -j ACCEPT
        iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${ADDITIONAL_RTP_PROFILE1} -j ACCEPT    	
    fi
    if [ "`nvram get 401`" = "1" ];then
    	case "`nvram get 830`" in
            0) iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${SIP_PROFILE2} -j ACCEPT ;;
            *) iptables -t nat -A PREROUTING  -p tcp -d ${WAN_IP} -m multiport --dport ${SIP_PROFILE2} -j ACCEPT ;;
    	esac
        iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${RTP_PROFILE2} -j ACCEPT
        iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -m multiport --dport ${ADDITIONAL_RTP_PROFILE2} -j ACCEPT
    fi
################Jose End#########################
    iptables -t nat -A PREROUTING  -p tcp -d ${WAN_IP} -j DNAT --to ${DMZ_HOST}
    iptables -t nat -A PREROUTING  -p udp -d ${WAN_IP} -j DNAT --to ${DMZ_HOST}
else
    iptables -A INPUT -p tcp -i ${WAN} --dport 53 -j DROP
    iptables -A INPUT -p udp -i ${WAN} --dport 53 -j DROP
  	#iptables -A INPUT -i ${WAN} -p tcp --dport 1:1024 -j DROP
  	#iptables -A INPUT -i ${WAN} -p udp --dport 1:1024 -j DROP
fi
fi

#if [ $MAC_Unspecified -eq 1 ];then
   iptables -F FORWARD
   iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
#fi
if [ "${ENABLE_HACKER_ATTACK_PROTECT}" -gt 0 ];then
	#Syn-flood Protection
    iptables -A FORWARD -p tcp --syn -m limit --limit 1/s -j ACCEPT	
	#SPOOFING
    eval OURNET=${LANIP_PREFIX}'0/24'
    iptables -A FORWARD -s ${OURNET} -i ${WAN} -j DROP

	#SMURF
    echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

	#Ping of death
    iptables -A FORWARD -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT

  	#Enable Hacker Attack Protect
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags ALL ALL -j DROP
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags ALL NONE -j DROP
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  	iptables -A INPUT -i ${WAN} -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
fi
#Furtive port scan
if [ "${FURTIVE_PORT_SCAN}" -gt 0 ];then
    iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
fi

#Client control not enabled
#Mac control not enabled
