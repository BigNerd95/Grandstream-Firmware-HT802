#!/bin/sh
checkpid() {
        local i

        for i in $*; do
                [ -d "/proc/${i}" ] || return 1
        done
        return 0
}
killproc() {
	pid=
	if [ -f "/var/run/${1}.pid" ]; then
		local line p
		read line < /var/run/${1}.pid
		for p in ${line}; do
			pid="${pid} ${p}"
		done
	fi
	if [ -z "${pid}" ]; then
		/usr/bin/killall ${1}
	else
		kill -TERM ${pid}
		usleep 100000
		if checkpid ${pid} && sleep 1 &&
		   checkpid ${pid} $$ sleep 3 &&
		   checkpid ${pid}; then
			kill -KILL ${pid}
			usleep 100000
		fi
	fi
	rm -f /var/run/${1}.pid
}

check_private_ipv4() {
    local r0_to_255="([0-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"
    local r16_to_31="(1[6-9]|2[0-9]|3[0-1])"
    local ip_class_a="(10)(\.${r0_to_255}){3}"
    local ip_class_b="(172)\.(${r16_to_31})(\.${r0_to_255}){2}"
    local ip_class_c="(192)\.(168)(\.${r0_to_255}){2}"

    if [ -n "`echo "$1" |grep -E "^$ip_class_a$"`" ] ||
        [ -n "`echo "$1" |grep -E "^$ip_class_b$"`" ] ||
        [ -n "`echo "$1" |grep -E "^$ip_class_c$"`" ];then
        return 0
    fi
    return 1
}

#
# if ArrIndex == null or ArrIndex == "" return Array[]
# if ArrIndex < 0 return ArrSize
# if ArrIndex >= ArrSize return ArrSize
# if ArrIndex >=0 && ArrIndex < ArrSize return Array[ArrIndex]
#
get_array() {
    local Content="${1}"
    local Separator="${2}"
    local ArrIndex="${3}"

    OLD_IFS="$IFS"
    IFS="${Separator}"
    arr="$(echo ${Content} | awk '{for(a=1;a<=NF;++a) print $a}')"
    arrSize="$(echo ${Content} | awk '{for(a=1;a<=NF;++a) print $a}' | grep -c '')"
    IFS="$OLD_IFS"

    [ -z "${ArrIndex}" ] && echo ${arr}
    [ -n "${ArrIndex}" ] && [ ${ArrIndex} -lt 0 ] && echo ${arrSize}
    [ -n "${ArrIndex}" ] && [ ${ArrIndex} -ge ${arrSize} ] && echo ${arrSize}
    [ -n "${ArrIndex}" ] && [ ${ArrIndex} -ge 0 ] && [ ${ArrIndex} -lt ${arrSize} ] && {
        index=0
        for a in ${arr}
        do
            [ ${ArrIndex} -eq ${index} ] && echo ${a} && break
            index=`expr ${index} + 1`
        done
    }
}

valid_port()
{
    local port="${1}"

    [ -z "${port}" ] && return 0
    [ -n "${port}" ] && [ ${port} -ge 0 ] && [ ${port} -le 65535 ] && return 1
    return 0
}

get_freemem()
{
    FreeLog="/tmp/free.log"
    free > ${FreeLog}
    cat ${FreeLog} | grep Total | awk '{print $4}'
    rm ${FreeLog}
}

get_custom_cert()
{
    CUSTOM_PEM="/tmp/.custom.pem" 
    CUSTOM_PEM_KEY="/tmp/.custom.pem.key"
    CUSTOM_PEM_RSAKEY="/tmp/.custom.pem.rsakey"
    CUSTOM_PEM_CERT="/tmp/.custom.pem.cert"
    ret=0

    nvram get 8472 | tr -d '\r' > ${CUSTOM_PEM}
    if test -n "`cert_verify ${CUSTOM_PEM}`"; then
        nvram unset :custom_8472_key
        nvram unset :custom_8472_cert
        nvram unset 8472
        ret=1
    else
        sed -n '/\-BEGIN CERTIFICATE\-/,/\-END CERTIFICATE\-/p' ${CUSTOM_PEM} > ${CUSTOM_PEM_CERT}
        sed -n '/\-BEGIN PRIVATE KEY\-/,/\-END PRIVATE KEY\-/p' ${CUSTOM_PEM} > ${CUSTOM_PEM_KEY}
        sed -n '/\-BEGIN RSA PRIVATE KEY\-/,/\-END RSA PRIVATE KEY\-/p' ${CUSTOM_PEM} > ${CUSTOM_PEM_RSAKEY}
        if [ -n "`cat ${CUSTOM_PEM_CERT}`" -a -n "`cat ${CUSTOM_PEM_KEY}`" ];then
            nvram set :custom_8472_key="`cat ${CUSTOM_PEM_KEY}`"
            nvram set :custom_8472_cert="`cat ${CUSTOM_PEM_CERT}`"
        elif [ -n "`cat ${CUSTOM_PEM_CERT}`" -a -n "`cat ${CUSTOM_PEM_RSAKEY}`" ];then
            nvram set :custom_8472_key="`cat ${CUSTOM_PEM_RSAKEY}`"
            nvram set :custom_8472_cert="`cat ${CUSTOM_PEM_CERT}`"
        else
            nvram unset 8472
            nvram unset :custom_8472_key
            nvram unset :custom_8472_cert
            ret=1
        fi
    fi
    [ -e ${CUSTOM_PEM} ] && rm -f ${CUSTOM_PEM}
    [ -e ${CUSTOM_PEM_RSAKEY} ] && rm -f ${CUSTOM_PEM_RSAKEY}
    [ -e ${CUSTOM_PEM_KEY} ] && rm -f ${CUSTOM_PEM_KEY}
    [ -e ${CUSTOM_PEM_CERT} ] && rm -f ${CUSTOM_PEM_CERT}
    return ${ret}
}

# formatted time compare
getNewerTime()
{
    local DEFAULT_TIME="1970-01-01 00:00:00"
    local baseTime="$1"
    local compareTime="$2"

    if test -n "${compareTime}" -a -n "${baseTime}";then
        tsBase=$(date +%s -d "${baseTime}" 2> /dev/null)
        bBase=$?
        tcCompare=$(date +%s -d "${compareTime}" 2> /dev/null)
        bCompare=$?
        if test ${bBase} -eq 0 -a ${bCompare} -eq 0; then
            if [ ${tcCompare} -gt ${tsBase} ];then
                echo "${compareTime}"
            else
                echo "${baseTime}"
            fi
        elif test ${bBase} -eq 0 -a ${bCompare} -ne 0; then
            echo "${baseTime}"
        elif test ${bBase} -ne 0 -a ${bCompare} -eq 0; then
            echo "${compareTime}"
        else
            echo "${DEFAULT_TIME}"
        fi
    elif test -z "${compareTime}" -a -n "${baseTime}";then
        echo "${baseTime}"
    elif test -n "${compareTime}" -a -z "${baseTime}";then
        echo "${compareTime}"
    else
        echo "${DEFAULT_TIME}"
    fi
}
